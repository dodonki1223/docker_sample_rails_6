version: 2.1
orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.1.0
  slack: circleci/slack@3.4.2
  heroku: circleci/heroku@1.0.1
  docker: circleci/docker@1.5.0
executors:
  base:
    docker:
      - image: cimg/ruby:2.6.6-node
        auth:
          username: dodonki1223
          password: $DOCKERHUB_PASSWORD
        environment:
          # Bundlerのパス設定が書き換えられ`vendor/bundle`ではなくて`/usr/local/bundle`を参照してしまい`bundle exec`でエラーになる
          # Bundlerのconfigファイル(pathの設定がされたもの)をworkspaceで永続化し`vendor/bundle`を参照するようにするための設定
          BUNDLE_APP_CONFIG: .bundle
      - image: circleci/postgres:12.0-alpine
        auth:
          username: dodonki1223
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: test_sample_db
          POSTGRES_PASSWORD: ""
    environment:
      - RAILS_ENV: test
      - PGHOST: 127.0.0.1
      - PGUSER: root
    working_directory: ~/dodonki1223/template_sample_rails_6

commands:
  # Yarn系のパッケージのインストール関連のコマンド
  install-yarn-packages:
    steps:
      - node/install-packages:
          pkg-manager: yarn

  # テストDB設定関連のコマンド
  # https://circleci.com/docs/ja/2.0/postgres-config/
  test-db-settings:
    steps:
      - run:
          name: Create test database
          command: |
            cp config/{database_circleci,database}.yml
            bin/rails db:schema:load --trace

  # ワークスペース関連のコマンド
  save-workspace:
    steps:
      - persist_to_workspace:
          # working_directory からの相対パスか絶対パスを指定します
          root: .
          paths: .
  using-workspace:
    steps:
      - attach_workspace:
          # working_directory からの相対パスか絶対パスを指定します
          at: .

  # Linter関連のコマンド
  linter:
    steps:
      - run:
          name: Rubocop
          command: bundle exec rubocop --require rubocop-rspec -D -P
      - run:
          name: Rails Best Practices
          command: bundle exec rails_best_practices .
      - run:
          name: Brakeman
          command: bundle exec brakeman

  # テスト関連コマンド
  testing:
    steps:
      - run:
          name: Run all RSpec
          command: bundle exec rspec --format progress

  # テストカバレッジ関連のコマンド
  # https://circleci.com/docs/2.0/code-coverage/#ruby
  # https://github.com/colszowka/simplecov/#getting-started
  store-coverage:
    steps:
      - store_artifacts:
          path: coverage
          destination: coverage-results

  # ドキュメント関連コマンド
  development-db-settings:
    steps:
      - run:
          name: Create development database
          command: |
            cp config/{database_circleci,database}.yml
            RAILS_ENV=development bin/rails db:schema:load --trace
  generate-entity-relationship-diagrams:
    steps:
      - run:
          name: Install graphviz
          command: |
            sudo apt-get update
            sudo apt-get install graphviz
      - run:
          name: Run Rails ERD
          command: RAILS_ENV=development bin/rake erd
  store-entity-relationship-diagrams:
    steps:
      - store_artifacts:
          path: db/erd/template_sample_rials6_db.png
          destination: db/erd/template_sample_rials6_db.png

  # デプロイ関連コマンド
  deploy-heroku:
    parameters:
      environment:
        type: enum
        enum: ["PRODUCTION", "DEVELOPMENT"]
    steps:
      - heroku/install
      - heroku/deploy-via-git:
          app-name: $HEROKU_APP_NAME_<< parameters.environment >>
          force: true
      - run:
          name: DB migration
          command: heroku run --app=$HEROKU_APP_NAME_<< parameters.environment >> bin/rake db:migrate
  deploy-notification:
    parameters:
      environment:
        type: enum
        enum: ["PRODUCTION", "DEVELOPMENT"]
    steps:
      - slack/status:
          # NOTE:下記コマンドでHeroku APPのURLを無理やり作成している
          #      $(heroku apps:info --app $HEROKU_APP_NAME_<< parameters.environment >> --shell | grep web_url | sed -e "s/web_url=//g")
          success_message: ':circleci-pass: Herokuの << parameters.environment >> 環境にデプロイが完了しました \n :github_octocat: User: $CIRCLE_USERNAME, Branch: $CIRCLE_BRANCH \n :ok_hand: $(heroku apps:info --app $HEROKU_APP_NAME_<< parameters.environment >> --shell | grep web_url | sed -e "s/web_url=//g")'
          failure_message: ':circleci-fail: Herokuの << parameters.environment >> 環境にデプロイが失敗しました \n :github_octocat: User: $CIRCLE_USERNAME, Branch: $CIRCLE_BRANCH'

jobs:
  setup:
    executor: base
    steps:
      - checkout
      - ruby/install-deps
      - install-yarn-packages
      - test-db-settings
      - save-workspace
  lint:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps
      - linter
  test:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps
      - testing
      - store-coverage
  document:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps
      - development-db-settings
      - generate-entity-relationship-diagrams
      - store-entity-relationship-diagrams
  deploy-heroku-development:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps
      - deploy-heroku:
          environment: DEVELOPMENT
      - deploy-notification:
          environment: DEVELOPMENT
  deploy-heroku-production:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps
      - deploy-heroku:
          environment: PRODUCTION
      - deploy-notification:
          environment: PRODUCTION

workflows:
  version: 2.1
  main:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      # 詳しくはドキュメントを確認
      #   https://circleci.com/orbs/registry/orb/circleci/docker
      - docker/hadolint:
          dockerfiles: .dockerdev/Dockerfile
          requires:
            - setup
      - test:
          requires:
            - setup
      - document:
          requires:
            - setup
      - slack/approval-notification:
          message: ':circleci-pass: $CIRCLE_BRANCH ブランチのデプロイ準備が整っています\n:github_octocat: User: $CIRCLE_USERNAME\nデプロイを実行する場合は *Approve* を押してください'
          color: '#FFFF66'
          requires:
            - lint
            - test
          filters:
            branches:
              only:
                - development
                - master
      - approval-job:
          # approvalの仕様がよくわかんなかったがこの記事である程度理解した
          # https://qiita.com/wasnot/items/baeb5862da83e658da86
          # https://circleci.com/docs/2.0/workflows/#holding-a-workflow-for-a-manual-approval
          type: approval
          requires:
            - slack/approval-notification
      - deploy-heroku-development:
          requires:
            - approval-job
          filters:
            branches:
              only: development
      - deploy-heroku-production:
          requires:
            - approval-job
          filters:
            branches:
              only: master
